////////////////////////////////////////////////////////
// 前順序　preorder traversal
// stepのテストとアサーションを簡単にしようとしたもの
////////////////////////////////////////////////////////

class Node
    Node left
    Node right
    Node parent
    int value
    
    method constructor(int val, Node left, Node right, Node parent)
        call setValue(val)
        call setLeftChild(left)
        call setRightChild(right)
        call setParent(parent)

    method setValue(int val)
        value ^= val

    method setLeftChild(Node node)
        copy Node node left

    method setRightChild(Node node)
        copy Node node right

    method setParent(Node node)
        copy Node node parent

class Tree
    Node root

    method setRoot(Node node)
        copy Node node root

    method step(Node cur, Node pre, int cnt)
        local Node next = nil
        if cur.left=nil && cur.right=nil then
            pre <=> next
        else
            if cur.left=nil && cur.right!=pre then
                copy Node cur.right next
                uncopy Node cur.parent pre
		cnt += 1
                print("走査：") show(next.value) print(" ")
            else
                if cur.parent=pre then
                    copy Node cur.left next
                    uncopy Node cur.parent pre
		    cnt += 1
                    print("走査：") show(next.value) print(" ")
                else
                    if cur.right=nil then
                        copy Node cur.parent next
                        uncopy Node cur.left pre
                    else
                        if cur.right=pre then
                            copy Node cur.parent next
                            uncopy Node cur.right pre
                        else
                             copy Node cur.right next
                             uncopy Node cur.left pre
			     cnt += 1
                             print("走査：") show(next.value) print(" ")
                        fi cur.parent=next
                    fi cur.right=nil
                fi cur.left=next
            fi cur.left=nil && cur.right=next
        fi cur.left=nil && cur.right=nil
        pre <=> cur
        cur <=> next
        delocal Node next = nil

    method preorder_traversal(Node result, int length)
    	local int cnt = 0
	cnt += 1
        print("走査：") show(result.value) print(" ")
        local Node pre = nil
        copy Node root pre
	from pre=root loop
	    call step(result, pre, cnt)
        until cnt = length
        uncopy Node result.parent pre
        delocal Node pre = nil
	delocal int cnt = length
	
class Program
    Tree tree
    int empty
    int length
    Node dummy
    Node node1
    Node node2
    Node node3
    Node node4
    Node node5
    Node node6
    Node node7
    Node node8
    Node node9
    int dummyValue
    int node1Value
    int node2Value
    int node3Value
    int node4Value
    int node5Value
    int node6Value
    int node7Value
    int node8Value
    int node9Value
    Node result
    method main()
        new Node dummy
        new Node node1
        new Node node2
        new Node node3
        new Node node4
	new Node node5
        new Node node6
        new Node node7
        new Node node8
        new Node node9
        dummyValue -= 1
        node1Value += 1
        node2Value += 2
        node3Value += 3
        node4Value += 4
        node5Value += 5
        node6Value += 6
        node7Value += 7
        node8Value += 8
        node9Value += 9
	length += 9
        call dummy::constructor(dummyValue, node1, empty, empty)
        call node1::constructor(node1Value, node2, node3, dummy)
        call node2::constructor(node2Value, node4, node5, node1)
        call node3::constructor(node3Value, empty, node8, node1)
        call node4::constructor(node4Value, empty, empty, node2)
        call node5::constructor(node5Value, node6, node7, node2)
        call node6::constructor(node6Value, empty, empty, node5)
        call node7::constructor(node7Value, empty, empty, node5)
        call node8::constructor(node8Value, node9, empty, node3)
        call node9::constructor(node9Value, empty, empty, node8)
	new Tree tree
        copy Node node1 result
        call tree::setRoot(dummy)
	print("\n実行前：") show(result.value) print("\n")
        call tree::preorder_traversal(result, length)
	print("\n順実行後：") show(result.value) print("\n")
        uncall tree::preorder_traversal(result, length)
	print("\n逆実行後：") show(result.value) print("\n")

//       /
//      1
//     / \
//    2    3
//   / \    \
//  4   5    8
//      /\   /
//     6  7 9
