//////////////////////////////////////////////////////////////////////////////
// Excerpted and revised from [1, pp.161-162]
//
// [1] Cservenka, M.H.: Design and Implementation of Dynamic Memory Management
//     in a Reversible Object-Oriented Programming Language, Master's thesis,
//     Department of Computer Science, University of Copenhagen (2018).
//////////////////////////////////////////////////////////////////////////////

class Cell
    int data
    int index
    Cell left
    Cell right
    Cell self

    method setData(int value)
        data ^= value

    method setIndex(int i)
        index ^= i

    method setLeft(Cell cell)
        left <=> cell

    method setRight(Cell cell)
        right <=> cell

    method setSelf(Cell cell)
        self <=> cell

    method append(Cell cell)
        if right = nil & cell != nil then
            right <=> cell

      	    local Cell selfCopy = nil
      	    copy Cell self selfCopy
      	    call right::setLeft(selfCopy)
      	    delocal Cell selfCopy = nil

      	    local int cellIndex = index + 1
      	    call right::setIndex(cellIndex)
      	    delocal int cellIndex = index + 1
   	else skip
        fi right != nil & cell = nil

        if right != nil then
            call right::append(cell)
        else skip
        fi right != nil

class DoublyLinkedList
    Cell head
    int length

    method appendCell(Cell cell)
        if head = nil & cell != nil then
            head <=> cell
        else skip
        fi head != nil & cell = nil

        if head != nil then
            call head::append(cell)
        else skip
        fi head != nil

        length += 1

class Program
    DoublyLinkedList list
    int listLength

    method main()
        new DoublyLinkedList list
        listLength += 10

        local int x = 0
        from x = 0 do skip
    	loop
            local Cell cell = nil
            new Cell cell

	    local Cell cellCopy = nil
	    copy Cell cell cellCopy
	    call cell::setSelf(cellCopy)
	    delocal Cell cellCopy = nil

	    call cell::setData(x)
	    call list::appendCell(cell)
      	    delocal Cell cell = nil
      	    x += 1
        until x = listLength
    	delocal int x = listLength
