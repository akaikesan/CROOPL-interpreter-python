////////////////////////////////////////////////////////
// 木の走査プログラム
////////////////////////////////////////////////////////

class Node
    Node left
    Node right
    int value
    
    method constructor(int val, Node left, Node right)
        call setValue(val)
        call setLeftChild(left)
        call setRightChild(right)

    method setValue(int val)
        value ^= val

    method setLeftChild(Node node)
        copy Node node left

    method setRightChild(Node node)
        copy Node node right

    method preorder()
        show(value)print(" ")
        if left != nil then
            call left::preorder()
        fi left != nil
        if right != nil then
            call right::preorder()
        fi right != nil

    method inorder()
        if left != nil then
            call left::inorder()
        fi left != nil
        show(value)print(" ")
        if right != nil then
            call right::inorder()
        fi right != nil

    method postorder()
        if left != nil then
            call left::postorder()
        fi left != nil
        if right != nil then
            call right::postorder()
        fi right != nil
        show(value)print(" ")

class Tree
    Node root

    method setRoot(Node node)
        copy Node node root

    method preorder()
        call root::preorder()
        print("\n")

    method inorder()
        call root::inorder()
        print("\n")

    method postorder()
        call root::postorder()
        print("\n")

class Program
    Tree tree
    int empty
    Node node1
    Node node2
    Node node3
    Node node4
    Node node5
    Node node6
    Node node7
    Node node8
    Node node9
    int node1Value
    int node2Value
    int node3Value
    int node4Value
    int node5Value
    int node6Value
    int node7Value
    int node8Value
    int node9Value
    Node result
    method main()
        new Node node1
        new Node node2
        new Node node3
        new Node node4
	new Node node5
        new Node node6
        new Node node7
        new Node node8
        new Node node9
        node1Value += 1
        node2Value += 2
        node3Value += 3
        node4Value += 4
        node5Value += 5
        node6Value += 6
        node7Value += 7
        node8Value += 8
        node9Value += 9
        call node1::constructor(node1Value, node2, node3)
        call node2::constructor(node2Value, node4, node5)
        call node3::setValue(node3Value)
        call node3::setRightChild(node8)
        call node4::setValue(node4Value)
        call node5::constructor(node5Value, node6, node7)
        call node6::setValue(node6Value)
        call node7::setValue(node7Value)
        call node8::setValue(node8Value)
        call node8::setLeftChild(node9)
        call node9::setValue(node9Value)
	new Tree tree
        copy Node node1 result
        call tree::setRoot(node1)
        print("順実行\n")
        print("前順：\n") call tree::preorder()
        print("間順：\n") call tree::inorder()
        print("後順：\n") call tree::postorder()
        print("逆実行\n")
        print("前順：") uncall tree::preorder() print("\n")
        print("間順：") uncall tree::inorder() print("\n")
        print("後順：") uncall tree::postorder() print("\n")

//      1
//     / \
//    2    3
//   / \    \
//  4   5    8
//      /\   /
//     6  7 9
