//////////////////////////////////////////////////////////////////////////////
// Excerpted and revised from [1, p.11]
// 1 1 2 3 5 8
// [1] Cservenka, M.H.: Design and Implementation of Dynamic Memory Management
//     in a Reversible Object-Oriented Programming Language, Master's thesis,
//     Department of Computer Science, University of Copenhagen (2018).
//////////////////////////////////////////////////////////////////////////////
// computing n(th) Fibonacci pair
class Fib
    int[] xs
    
    method init()
        new int[2] xs
  
    method fib(int n)
        if n = 0 then
            xs[0] ^= 1
       	    xs[1] ^= 1
        else 
            n -= 1
            call fib(n)
            xs[0] += xs[1]
            xs[0] <=> xs[1]
        fi xs[0] = xs[1]

      method get (int attached out)
        out ^= xs[1]

     method pr (int r)
        print r

class Program
    int result
    int n

    method main()
        n ^= 8
        local Fib f = nil
        new separate Fib f
        call f::init()
        call f::fib(n)
        call f::get(result)  //wait
        print result
        uncall f::fib(n)
        uncall f::init()
        delete separate Fib f
        delocal Fib f = nil

