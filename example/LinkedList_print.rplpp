class Cell
    Cell next
    int data

    method constructor(int value)
        data ^= value

    method append(Cell cell)
        if next = nil & cell != nil then
      	    next <=> cell
        else skip
    	fi next != nil & cell = nil

    	if next != nil then
      	    call next::append(cell)
        else skip
    	fi next != nil

    method pretty()
        show(data)
    	if next != nil then
      	    print(" -> ")
      	    call next::pretty()
        fi next != nil

class LinkedList
    Cell head
    int listLength

    method insertHead(Cell cell)
        if head = nil & cell != nil then
      	    head <=> cell
        else skip
        fi head != nil & cell = nil

    method appendCell(Cell cell)
        call insertHead(cell)

    	if head != nil then
      	    call head::append(cell)
        else skip
    	fi head != nil

    	listLength += 1

    method prependCell(Cell cell)
        call insertHead(cell)

    	if cell != nil & head != nil then
      	    call cell::append(head)
        else skip
    	fi cell != nil & head = nil

    	if cell != nil & head = nil then
      	    cell <=> head
        else skip
    	fi cell = nil & head != nil

    	listLength += 1

    method length(int result)
        result ^= listLength

    method pretty()
        print("Linked_List[")
    	call head::pretty()
    	print("]\n")

class Program
    LinkedList linkedList
    int sumResult
    int listLength

    method main()
        new LinkedList linkedList
        listLength += 10

        local int x = 0
        from x = 0 do
     	    skip
        loop
            local Cell cell = nil
	    new Cell cell
	    call cell::constructor(x)
	    call linkedList::appendCell(cell)
	    delocal Cell cell = nil
	    x += 1
        until x = listLength
    	delocal int x = listLength
